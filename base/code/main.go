package main

/* -----------------------------------------------------------------

⚠️ This code is generated by the agent. Do not edit this file!

Recommendation: write your logic in the `work.go` file in the same directory.


// Register the work function

func init() {
	WithWork(doWork)
}

func doWork(ctx context.Context) (Clean, error) {
	// Your logic goes here
}

----------------------------------------------------------------- */

import (
	"base_replacement/pkg/adapters"
	"context"
	"fmt"
	"github.com/codefly-dev/core/shared"
	"github.com/codefly-dev/core/standards"
	"os/signal"
	"syscall"

	codefly "github.com/codefly-dev/sdk-go"
)

func Must[T any](t T, err error) T {
	if err != nil {
		panic(err)
	}
	return t
}

type Clean func()
type Work func(ctx context.Context) (Clean, error)

var work Work

func WithWork(w Work) {
	work = w
}

func main() {
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	provider, err := codefly.Init(ctx)
	if err != nil {
		panic(err)
	}
	ctx = provider.Inject(ctx)

	defer codefly.CatchPanic(ctx)

	config := &adapters.Configuration{
		EndpointGrpcPort: codefly.For(ctx).WithDefaultNetwork().API(standards.GRPC).NetworkInstance().Port,
	}
	if net := codefly.For(ctx).WithDefaultNetwork().API(standards.REST).NetworkInstance(); net != nil {
		config.EndpointHttpPort = shared.Pointer(net.Port)
	}

	server, err := adapters.NewServer(config)
	if err != nil {
		panic(err)
	}

	go func() {
		err = server.Start(ctx)
		if err != nil {
			panic(err)
		}
	}()

	if work != nil {
		clean, err := work(ctx)
		if err != nil {
			panic(err)
		}
		defer clean()
	}

	<-ctx.Done()
	server.Stop()
	fmt.Println("got interruption signal")

}
