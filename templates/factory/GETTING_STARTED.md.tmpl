# Project Structure

This project follows the Clean or Hexagonal Architecture. Here is a brief overview of the directory structure:

- `pkg`: This is the main package directory. It contains the following subdirectories:
    - `adapters`: This directory contains the code that makes the connection between your business logic and the outside world. These are the implementations of all the interfaces that your application has defined.
    - `business`: This directory contains the core business logic of your application. It is independent of any specific infrastructure and can be tested in isolation.
    - `infra`: This directory contains the infrastructure code that your application needs to run. This could include code for accessing the database, the file system, the network, etc.
    - `gen`: This directory contains all the generated code for your application. You should not manually modify the code in this directory.

In addition to these directories, you will also find a `work.go` file in the main directory. This file is where you should write your application's main logic. Here is a brief overview of the functions in this file:

- `init()`: This function is automatically called when the program starts. It registers the `doWork` function to be called when the application runs.
- `doWork(ctx context.Context) (Clean, error)`: This is the function where you should write your application's main logic. It takes a context as an argument and returns a `Clean` function and an error. The `Clean` function should be used to clean up any resources that your application uses.

Please note that the `work.go` file is generated by the agent and should not be edited directly. Instead, you should write your logic in a separate `work.go` file in the same directory.
