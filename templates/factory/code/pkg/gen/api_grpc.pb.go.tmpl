// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	{{ .Service.Name.Title }}Service_Version_FullMethodName = "/api.{{ .Service.Name.Title }}Service/Version"
)

// {{ .Service.Name.Title }}ServiceClient is the client API for {{ .Service.Name.Title }}Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type {{ .Service.Name.Title }}ServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type webServiceClient struct {
	cc grpc.ClientConnInterface
}

func New{{ .Service.Name.Title }}ServiceClient(cc grpc.ClientConnInterface) {{ .Service.Name.Title }}ServiceClient {
	return &webServiceClient{cc}
}

func (c *webServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, {{ .Service.Name.Title }}Service_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// {{ .Service.Name.Title }}ServiceServer is the server API for {{ .Service.Name.Title }}Service service.
// All implementations must embed Unimplemented{{ .Service.Name.Title }}ServiceServer
// for forward compatibility
type {{ .Service.Name.Title }}ServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	mustEmbedUnimplemented{{ .Service.Name.Title }}ServiceServer()
}

// Unimplemented{{ .Service.Name.Title }}ServiceServer must be embedded to have forward compatible implementations.
type Unimplemented{{ .Service.Name.Title }}ServiceServer struct {
}

func (Unimplemented{{ .Service.Name.Title }}ServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (Unimplemented{{ .Service.Name.Title }}ServiceServer) mustEmbedUnimplemented{{ .Service.Name.Title }}ServiceServer() {}

// Unsafe{{ .Service.Name.Title }}ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to {{ .Service.Name.Title }}ServiceServer will
// result in compilation errors.
type Unsafe{{ .Service.Name.Title }}ServiceServer interface {
	mustEmbedUnimplemented{{ .Service.Name.Title }}ServiceServer()
}

func Register{{ .Service.Name.Title }}ServiceServer(s grpc.ServiceRegistrar, srv {{ .Service.Name.Title }}ServiceServer) {
	s.RegisterService(&{{ .Service.Name.Title }}Service_ServiceDesc, srv)
}

func _{{ .Service.Name.Title }}Service_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.({{ .Service.Name.Title }}ServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: {{ .Service.Name.Title }}Service_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.({{ .Service.Name.Title }}ServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// {{ .Service.Name.Title }}Service_ServiceDesc is the grpc.ServiceDesc for {{ .Service.Name.Title }}Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var {{ .Service.Name.Title }}Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.{{ .Service.Name.Title }}Service",
	HandlerType: (*{{ .Service.Name.Title }}ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _{{ .Service.Name.Title }}Service_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
