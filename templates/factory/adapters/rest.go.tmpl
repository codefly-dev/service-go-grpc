package adapters

import (
	"context"
	"fmt"
	"github.com/rs/cors"
	"net/http"
	gen "{{.Domain}}/adapters/v1"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

type RestServer struct {
	config *Configuration
}

func NewRestServer(c *Configuration) (*RestServer, error) {
	server := &RestServer{config: c}
	// Start Rest server (and proxy calls to gRPC server endpoint)
	return server, nil
}

func (s *RestServer) Run(ctx context.Context) error {
	fmt.Println("Starting Rest server at", s.config.EndpointHttp)
	gwMux := runtime.NewServeMux()

	corsObj := cors.New(cors.Options{
		AllowedOrigins: []string{"http://localhost:3000"}, // or "*" for all origins
		AllowedMethods: []string{"GET", "POST", "PUT", "DELETE", "PATCH"},
		AllowedHeaders: []string{"*"}, // or specify particular headers
	})
	opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
	err := gen.Register{{.Name}}HandlerFromEndpoint(ctx, gwMux, s.config.EndpointGrpc, opts)
	if err != nil {
		return err
	}
	return http.ListenAndServe(s.config.EndpointHttp, corsObj.Handler(gwMux))
}
