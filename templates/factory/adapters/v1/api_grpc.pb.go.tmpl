// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	{{.Name}}_Version_FullMethodName = "/api.{{.Name}}/Version"
)

// {{.Name}}Client is the client API for {{.Name}} service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type {{.Name}}Client interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func New{{.Name}}Client(cc grpc.ClientConnInterface) {{.Name}}Client {
	return &webClient{cc}
}

func (c *webClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, {{.Name}}_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// {{.Name}}Server is the server API for {{.Name}} service.
// All implementations must embed Unimplemented{{.Name}}Server
// for forward compatibility
type {{.Name}}Server interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	mustEmbedUnimplemented{{.Name}}Server()
}

// Unimplemented{{.Name}}Server must be embedded to have forward compatible implementations.
type Unimplemented{{.Name}}Server struct {
}

func (Unimplemented{{.Name}}Server) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (Unimplemented{{.Name}}Server) mustEmbedUnimplemented{{.Name}}Server() {}

// Unsafe{{.Name}}Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to {{.Name}}Server will
// result in compilation errors.
type Unsafe{{.Name}}Server interface {
	mustEmbedUnimplemented{{.Name}}Server()
}

func Register{{.Name}}Server(s grpc.ServiceRegistrar, srv {{.Name}}Server) {
	s.RegisterService(&{{.Name}}_ServiceDesc, srv)
}

func _{{.Name}}_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.({{.Name}}Server).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: {{.Name}}_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.({{.Name}}Server).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// {{.Name}}_ServiceDesc is the grpc.ServiceDesc for {{.Name}} service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var {{.Name}}_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.{{.Name}}",
	HandlerType: (*{{.Name}}Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _{{.Name}}_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
