// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api.proto

package gen

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SvcService_Version_FullMethodName = "/api.SvcService/Version"
)

// SvcServiceClient is the client API for SvcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SvcServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type svcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSvcServiceClient(cc grpc.ClientConnInterface) SvcServiceClient {
	return &svcServiceClient{cc}
}

func (c *svcServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, SvcService_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SvcServiceServer is the server API for SvcService service.
// All implementations must embed UnimplementedSvcServiceServer
// for forward compatibility
type SvcServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	mustEmbedUnimplementedSvcServiceServer()
}

// UnimplementedSvcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSvcServiceServer struct {
}

func (UnimplementedSvcServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedSvcServiceServer) mustEmbedUnimplementedSvcServiceServer() {}

// UnsafeSvcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SvcServiceServer will
// result in compilation errors.
type UnsafeSvcServiceServer interface {
	mustEmbedUnimplementedSvcServiceServer()
}

func RegisterSvcServiceServer(s grpc.ServiceRegistrar, srv SvcServiceServer) {
	s.RegisterService(&SvcService_ServiceDesc, srv)
}

func _SvcService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SvcService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SvcService_ServiceDesc is the grpc.ServiceDesc for SvcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SvcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SvcService",
	HandlerType: (*SvcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _SvcService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
